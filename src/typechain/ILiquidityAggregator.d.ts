/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILiquidityAggregatorInterface extends ethers.utils.Interface {
  functions: {
    "buy((address,uint256,bytes4,bytes),tuple[])": FunctionFragment;
    "getUserTokens(uint32,address,uint256,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [
      {
        nftContract: string;
        nftId: BigNumberish;
        buyFuncSelector: BytesLike;
        buyFuncDataEncoded: BytesLike;
      },
      {
        chainId: BigNumberish;
        localWeth: string;
        localWethAmount: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class ILiquidityAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILiquidityAggregatorInterface;

  functions: {
    buy(
      nftInfo: {
        nftContract: string;
        nftId: BigNumberish;
        buyFuncSelector: BytesLike;
        buyFuncDataEncoded: BytesLike;
      },
      funds: {
        chainId: BigNumberish;
        localWeth: string;
        localWethAmount: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserTokens(
      chainId: BigNumberish,
      localWeth: string,
      localWethAmount: BigNumberish,
      userAddress: string,
      requestId: BigNumberish,
      fundIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    nftInfo: {
      nftContract: string;
      nftId: BigNumberish;
      buyFuncSelector: BytesLike;
      buyFuncDataEncoded: BytesLike;
    },
    funds: {
      chainId: BigNumberish;
      localWeth: string;
      localWethAmount: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserTokens(
    chainId: BigNumberish,
    localWeth: string,
    localWethAmount: BigNumberish,
    userAddress: string,
    requestId: BigNumberish,
    fundIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      nftInfo: {
        nftContract: string;
        nftId: BigNumberish;
        buyFuncSelector: BytesLike;
        buyFuncDataEncoded: BytesLike;
      },
      funds: {
        chainId: BigNumberish;
        localWeth: string;
        localWethAmount: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokens(
      chainId: BigNumberish,
      localWeth: string,
      localWethAmount: BigNumberish,
      userAddress: string,
      requestId: BigNumberish,
      fundIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buy(
      nftInfo: {
        nftContract: string;
        nftId: BigNumberish;
        buyFuncSelector: BytesLike;
        buyFuncDataEncoded: BytesLike;
      },
      funds: {
        chainId: BigNumberish;
        localWeth: string;
        localWethAmount: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserTokens(
      chainId: BigNumberish,
      localWeth: string,
      localWethAmount: BigNumberish,
      userAddress: string,
      requestId: BigNumberish,
      fundIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      nftInfo: {
        nftContract: string;
        nftId: BigNumberish;
        buyFuncSelector: BytesLike;
        buyFuncDataEncoded: BytesLike;
      },
      funds: {
        chainId: BigNumberish;
        localWeth: string;
        localWethAmount: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserTokens(
      chainId: BigNumberish,
      localWeth: string,
      localWethAmount: BigNumberish,
      userAddress: string,
      requestId: BigNumberish,
      fundIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
