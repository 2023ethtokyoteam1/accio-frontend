/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockInterchainAccountRouterInterface extends ethers.utils.Interface {
  functions: {
    "dispatch(uint32,tuple[])": FunctionFragment;
    "getInterchainAccount(uint32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dispatch",
    values: [BigNumberish, { to: string; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterchainAccount",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "dispatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterchainAccount",
    data: BytesLike
  ): Result;

  events: {
    "Dispatched(uint32,address,bytes4,uint32,address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dispatched"): EventFragment;
}

export type DispatchedEvent = TypedEvent<
  [
    number,
    string,
    string,
    number,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    destinationDomain: number;
    target: string;
    functionSelector: string;
    remoteChainId: number;
    fromToken: string;
    fromTokenAmount: BigNumber;
    userAddress: string;
    requestId: BigNumber;
    fundIndex: BigNumber;
  }
>;

export class MockInterchainAccountRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockInterchainAccountRouterInterface;

  functions: {
    "dispatch(uint32,tuple[])"(
      _destinationDomain: BigNumberish,
      calls: { to: string; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dispatch(uint32,address,bytes)"(
      _destinationDomain: BigNumberish,
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInterchainAccount(
      _originDomain: BigNumberish,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  "dispatch(uint32,tuple[])"(
    _destinationDomain: BigNumberish,
    calls: { to: string; data: BytesLike }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dispatch(uint32,address,bytes)"(
    _destinationDomain: BigNumberish,
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInterchainAccount(
    _originDomain: BigNumberish,
    _sender: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    "dispatch(uint32,tuple[])"(
      _destinationDomain: BigNumberish,
      calls: { to: string; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<string>;

    "dispatch(uint32,address,bytes)"(
      _destinationDomain: BigNumberish,
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getInterchainAccount(
      _originDomain: BigNumberish,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Dispatched(uint32,address,bytes4,uint32,address,uint256,address,uint256,uint256)"(
      destinationDomain?: null,
      target?: null,
      functionSelector?: null,
      remoteChainId?: null,
      fromToken?: null,
      fromTokenAmount?: null,
      userAddress?: null,
      requestId?: null,
      fundIndex?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ],
      {
        destinationDomain: number;
        target: string;
        functionSelector: string;
        remoteChainId: number;
        fromToken: string;
        fromTokenAmount: BigNumber;
        userAddress: string;
        requestId: BigNumber;
        fundIndex: BigNumber;
      }
    >;

    Dispatched(
      destinationDomain?: null,
      target?: null,
      functionSelector?: null,
      remoteChainId?: null,
      fromToken?: null,
      fromTokenAmount?: null,
      userAddress?: null,
      requestId?: null,
      fundIndex?: null
    ): TypedEventFilter<
      [
        number,
        string,
        string,
        number,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ],
      {
        destinationDomain: number;
        target: string;
        functionSelector: string;
        remoteChainId: number;
        fromToken: string;
        fromTokenAmount: BigNumber;
        userAddress: string;
        requestId: BigNumber;
        fundIndex: BigNumber;
      }
    >;
  };

  estimateGas: {
    "dispatch(uint32,tuple[])"(
      _destinationDomain: BigNumberish,
      calls: { to: string; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dispatch(uint32,address,bytes)"(
      _destinationDomain: BigNumberish,
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInterchainAccount(
      _originDomain: BigNumberish,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "dispatch(uint32,tuple[])"(
      _destinationDomain: BigNumberish,
      calls: { to: string; data: BytesLike }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dispatch(uint32,address,bytes)"(
      _destinationDomain: BigNumberish,
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInterchainAccount(
      _originDomain: BigNumberish,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
