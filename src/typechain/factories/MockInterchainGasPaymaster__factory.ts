/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockInterchainGasPaymaster,
  MockInterchainGasPaymasterInterface,
} from "../MockInterchainGasPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageId",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "_destinationDomain",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "_gasAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_refundAddress",
        type: "address",
      },
    ],
    name: "payForGas",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_destinationDomain",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "_gasAmount",
        type: "uint256",
      },
    ],
    name: "quoteGasPayment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102a7806100206000396000f3fe6080604052600436106100295760003560e01c806311bf2c181461002e578063a69297931461004a575b600080fd5b610048600480360381019061004391906101a0565b610087565b005b34801561005657600080fd5b50610071600480360381019061006c9190610207565b61008d565b60405161007e9190610256565b60405180910390f35b50505050565b600092915050565b600080fd5b6000819050919050565b6100ad8161009a565b81146100b857600080fd5b50565b6000813590506100ca816100a4565b92915050565b600063ffffffff82169050919050565b6100e9816100d0565b81146100f457600080fd5b50565b600081359050610106816100e0565b92915050565b6000819050919050565b61011f8161010c565b811461012a57600080fd5b50565b60008135905061013c81610116565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016d82610142565b9050919050565b61017d81610162565b811461018857600080fd5b50565b60008135905061019a81610174565b92915050565b600080600080608085870312156101ba576101b9610095565b5b60006101c8878288016100bb565b94505060206101d9878288016100f7565b93505060406101ea8782880161012d565b92505060606101fb8782880161018b565b91505092959194509250565b6000806040838503121561021e5761021d610095565b5b600061022c858286016100f7565b925050602061023d8582860161012d565b9150509250929050565b6102508161010c565b82525050565b600060208201905061026b6000830184610247565b9291505056fea2646970667358221220581ada305da31d67209873e3d31da0b2bb543c83275aaab6ce299df8cb70e1b164736f6c63430008130033";

export class MockInterchainGasPaymaster__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockInterchainGasPaymaster> {
    return super.deploy(overrides || {}) as Promise<MockInterchainGasPaymaster>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockInterchainGasPaymaster {
    return super.attach(address) as MockInterchainGasPaymaster;
  }
  connect(signer: Signer): MockInterchainGasPaymaster__factory {
    return super.connect(signer) as MockInterchainGasPaymaster__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockInterchainGasPaymasterInterface {
    return new utils.Interface(_abi) as MockInterchainGasPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockInterchainGasPaymaster {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockInterchainGasPaymaster;
  }
}
