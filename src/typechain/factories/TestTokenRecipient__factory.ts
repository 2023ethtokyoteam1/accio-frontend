/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestTokenRecipient,
  TestTokenRecipientInterface,
} from "../TestTokenRecipient";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "ReceivedCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "origin",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "sender",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ReceivedMessage",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "handleWithTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastSender",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e29806100206000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c80632f796f501161005b5780632f796f50146100d9578063352e7eff146100f7578063829a86d914610113578063c23f001f146101315761007c565b80626e75ec146100815780631e83409a1461009f578063256fec88146100bb575b600080fd5b610089610161565b60405161009691906105d7565b60405180910390f35b6100b960048036038101906100b49190610661565b6101ef565b005b6100c36103ac565b6040516100d091906106a7565b60405180910390f35b6100e16103b2565b6040516100ee91906106d1565b60405180910390f35b610111600480360381019061010c91906107ef565b6103d8565b005b61011b61051c565b6040516101289190610898565b60405180910390f35b61014b600480360381019061014691906108b3565b610522565b6040516101589190610898565b60405180910390f35b6001805461016e90610922565b80601f016020809104026020016040519081016040528092919081815260200182805461019a90610922565b80156101e75780601f106101bc576101008083540402835291602001916101e7565b820191906000526020600020905b8154815290600101906020018083116101ca57829003601f168201915b505050505081565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036102ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a5906109b0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b81526004016103659291906109d0565b6020604051808303816000875af1158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190610a31565b5050565b60005481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b848663ffffffff167fb2d1d3f10ca4f0ff536aa13affafdca6f4d95b031fa3b1856fb722a27e8ee043868686866040516104159493929190610a9a565b60405180910390a384600081905550838360019182610435929190610cc0565b5081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060038190555080600460008760001c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461050d9190610dbf565b92505081905550505050505050565b60035481565b6004602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610581578082015181840152602081019050610566565b60008484015250505050565b6000601f19601f8301169050919050565b60006105a982610547565b6105b38185610552565b93506105c3818560208601610563565b6105cc8161058d565b840191505092915050565b600060208201905081810360008301526105f1818461059e565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061062e82610603565b9050919050565b61063e81610623565b811461064957600080fd5b50565b60008135905061065b81610635565b92915050565b600060208284031215610677576106766105f9565b5b60006106858482850161064c565b91505092915050565b6000819050919050565b6106a18161068e565b82525050565b60006020820190506106bc6000830184610698565b92915050565b6106cb81610623565b82525050565b60006020820190506106e660008301846106c2565b92915050565b600063ffffffff82169050919050565b610705816106ec565b811461071057600080fd5b50565b600081359050610722816106fc565b92915050565b6107318161068e565b811461073c57600080fd5b50565b60008135905061074e81610728565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261077957610778610754565b5b8235905067ffffffffffffffff81111561079657610795610759565b5b6020830191508360018202830111156107b2576107b161075e565b5b9250929050565b6000819050919050565b6107cc816107b9565b81146107d757600080fd5b50565b6000813590506107e9816107c3565b92915050565b60008060008060008060a0878903121561080c5761080b6105f9565b5b600061081a89828a01610713565b965050602061082b89828a0161073f565b955050604087013567ffffffffffffffff81111561084c5761084b6105fe565b5b61085889828a01610763565b9450945050606061086b89828a0161064c565b925050608061087c89828a016107da565b9150509295509295509295565b610892816107b9565b82525050565b60006020820190506108ad6000830184610889565b92915050565b600080604083850312156108ca576108c96105f9565b5b60006108d88582860161064c565b92505060206108e98582860161064c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061093a57607f821691505b60208210810361094d5761094c6108f3565b5b50919050565b600082825260208201905092915050565b7f6e6f2062616c616e636500000000000000000000000000000000000000000000600082015250565b600061099a600a83610953565b91506109a582610964565b602082019050919050565b600060208201905081810360008301526109c98161098d565b9050919050565b60006040820190506109e560008301856106c2565b6109f26020830184610889565b9392505050565b60008115159050919050565b610a0e816109f9565b8114610a1957600080fd5b50565b600081519050610a2b81610a05565b92915050565b600060208284031215610a4757610a466105f9565b5b6000610a5584828501610a1c565b91505092915050565b82818337600083830152505050565b6000610a798385610953565b9350610a86838584610a5e565b610a8f8361058d565b840190509392505050565b60006060820190508181036000830152610ab5818688610a6d565b9050610ac460208301856106c2565b610ad16040830184610889565b95945050505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b39565b610b808683610b39565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610bbd610bb8610bb3846107b9565b610b98565b6107b9565b9050919050565b6000819050919050565b610bd783610ba2565b610beb610be382610bc4565b848454610b46565b825550505050565b600090565b610c00610bf3565b610c0b818484610bce565b505050565b5b81811015610c2f57610c24600082610bf8565b600181019050610c11565b5050565b601f821115610c7457610c4581610b14565b610c4e84610b29565b81016020851015610c5d578190505b610c71610c6985610b29565b830182610c10565b50505b505050565b600082821c905092915050565b6000610c9760001984600802610c79565b1980831691505092915050565b6000610cb08383610c86565b9150826002028217905092915050565b610cca8383610ada565b67ffffffffffffffff811115610ce357610ce2610ae5565b5b610ced8254610922565b610cf8828285610c33565b6000601f831160018114610d275760008415610d15578287013590505b610d1f8582610ca4565b865550610d87565b601f198416610d3586610b14565b60005b82811015610d5d57848901358255600182019150602085019450602081019050610d38565b86831015610d7a5784890135610d76601f891682610c86565b8355505b6001600288020188555050505b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dca826107b9565b9150610dd5836107b9565b9250828201905080821115610ded57610dec610d90565b5b9291505056fea2646970667358221220fbe2908051bcf02edf45b6f1ebe29b6b934c1417ba26362042b575cf358238bf64736f6c63430008130033";

export class TestTokenRecipient__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTokenRecipient> {
    return super.deploy(overrides || {}) as Promise<TestTokenRecipient>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestTokenRecipient {
    return super.attach(address) as TestTokenRecipient;
  }
  connect(signer: Signer): TestTokenRecipient__factory {
    return super.connect(signer) as TestTokenRecipient__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenRecipientInterface {
    return new utils.Interface(_abi) as TestTokenRecipientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTokenRecipient {
    return new Contract(address, _abi, signerOrProvider) as TestTokenRecipient;
  }
}
