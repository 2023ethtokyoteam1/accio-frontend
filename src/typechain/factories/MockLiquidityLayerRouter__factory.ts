/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockLiquidityLayerRouter,
  MockLiquidityLayerRouterInterface,
} from "../MockLiquidityLayerRouter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "destinationDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "recipientAddress",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "bridge",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fundIndex",
        type: "uint256",
      },
    ],
    name: "DispatchedWithTokens",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_destinationDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_recipientAddress",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_bridge",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_messageBody",
        type: "bytes",
      },
    ],
    name: "dispatchWithTokens",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061052b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639540473b14610030575b600080fd5b61004a600480360381019061004591906102b9565b610060565b6040516100579190610397565b60405180910390f35b6000806000848481019061007491906103b2565b915091507f825e29542a6014d591c7dc16b2a4db60ad709c30bdd507729d28796a3362f08b8b8b8b8b8b8b88886040516100b598979695949392919061047d565b60405180910390a17f1ef5a46d6b5771d5cd18bb706836b53cd6ab269f8edc4b4937dc27b4077b360d9250505098975050505050505050565b600080fd5b600080fd5b600063ffffffff82169050919050565b610111816100f8565b811461011c57600080fd5b50565b60008135905061012e81610108565b92915050565b6000819050919050565b61014781610134565b811461015257600080fd5b50565b6000813590506101648161013e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101958261016a565b9050919050565b6101a58161018a565b81146101b057600080fd5b50565b6000813590506101c28161019c565b92915050565b6000819050919050565b6101db816101c8565b81146101e657600080fd5b50565b6000813590506101f8816101d2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610223576102226101fe565b5b8235905067ffffffffffffffff8111156102405761023f610203565b5b60208301915083600182028301111561025c5761025b610208565b5b9250929050565b60008083601f840112610279576102786101fe565b5b8235905067ffffffffffffffff81111561029657610295610203565b5b6020830191508360018202830111156102b2576102b1610208565b5b9250929050565b60008060008060008060008060c0898b0312156102d9576102d86100ee565b5b60006102e78b828c0161011f565b98505060206102f88b828c01610155565b97505060406103098b828c016101b3565b965050606061031a8b828c016101e9565b955050608089013567ffffffffffffffff81111561033b5761033a6100f3565b5b6103478b828c0161020d565b945094505060a089013567ffffffffffffffff81111561036a576103696100f3565b5b6103768b828c01610263565b92509250509295985092959890939650565b61039181610134565b82525050565b60006020820190506103ac6000830184610388565b92915050565b600080604083850312156103c9576103c86100ee565b5b60006103d7858286016101e9565b92505060206103e8858286016101e9565b9150509250929050565b6103fb816100f8565b82525050565b61040a8161018a565b82525050565b610419816101c8565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061045c838561041f565b9350610469838584610430565b6104728361043f565b840190509392505050565b600060e082019050610492600083018b6103f2565b61049f602083018a610388565b6104ac6040830189610401565b6104b96060830188610410565b81810360808301526104cc818688610450565b90506104db60a0830185610410565b6104e860c0830184610410565b999850505050505050505056fea2646970667358221220ca9e365ce183fd672de40c23923128fa28651156aa18136835486f3bbb3aba8a64736f6c63430008130033";

export class MockLiquidityLayerRouter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockLiquidityLayerRouter> {
    return super.deploy(overrides || {}) as Promise<MockLiquidityLayerRouter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockLiquidityLayerRouter {
    return super.attach(address) as MockLiquidityLayerRouter;
  }
  connect(signer: Signer): MockLiquidityLayerRouter__factory {
    return super.connect(signer) as MockLiquidityLayerRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLiquidityLayerRouterInterface {
    return new utils.Interface(_abi) as MockLiquidityLayerRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLiquidityLayerRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockLiquidityLayerRouter;
  }
}
